## *** THINGS TO CHANGE/CHECK: ***
## MCU paths                             [mcu] section
## Thermistor types                      [extruder] and [heater_bed] sections - See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types
## Z Endstop Switch location             [homing_override] section
## Z Endstop Switch  offset for Z0       [stepper_z] section
## PID tune                              [extruder] and [heater_bed] sections
## Fine tune E steps                     [extruder] section

## kliper backup

###############################################################
#PLEASE READ THE WHOLE CONFIG BEFORE ATTEMPTING TO DO ANYTHING
#CONNECTORS/PORTS ON THE CONTROLLERS ARE NOTED WITH COMMENTS FOR EACH LOCATION/INPUT/OUTPUT

#How do I upgrade to the latest software?
#The general way to upgrade is to ssh into the Raspberry Pi and run:
#cd ~/klipper
#git pull
#~/klipper/scripts/install-octopi.sh

#To recompile and reflash the micro-controller code:

### For SKR1.4 Turbo MCU firmware update:###
#	sudo service klipper stop
#	cd ~/klipper
#	git pull
#	make clean
#	make menuconfig					#LPC1769....Turbo
#	make
#	./scripts/flash-sdcard.sh /dev/serial/by-id/usb-Klipper_lpc1769_1E80001347084AAFAEE16C5DC32000F5-if00 btt-skr-turbo-v1.4			 #Address of your Board as in config below#
#		sudo service klipper start		#No need to run this line if carring on to below update#


#However, it's often the case that only the host software changes. In this case, one can update and restart just the host software with:
#	cd ~/klipper
#	git pull
#	sudo service klipper restart
#If after using this shortcut the software warns about needing to reflash the micro-controller or some other unusual error occurs, then follow the full upgrade steps outlined above.
#Note that the RESTART and FIRMWARE_RESTART g-code commands do not load new software - the above "sudo service klipper restart" and "make flash" commands are needed for a software change to take effect.


# use the following modifiers before the pin definition (ex: ^!ar99)
# ! 			invert the logic
# ^ 			activate 5v pullup (does not apply to all pins)
# mcu_name: 	use pins on additional MCU (ex: Tri:PF0)


#____________________________ Include Configs ______________________________#

# #Include other G-Code Macro config's
[include mainsail.cfg]  # Got to include this for Mainsail to work
[include timelapse.cfg]
[include Print_Start_Con.cfg]
[include Nozzle_Purge_and_Clean.cfg]
[include Case_Neos.cfg]
[include Homing.cfg]
[include KAMP_Settings.cfg]
[include ParBot_Neos.cfg]
[include Testing.cfg]
[include ShakeTune.cfg]
#[include trad_rack_skr_pico.cfg]
##===================================================================

#Mainsail support
[pause_resume]
[display_status]

[virtual_sdcard]
path: /home/pi/printer_data/gcodes


[idle_timeout]
gcode:
    {% if not printer.pause_resume.is_paused %}
        TURN_OFF_HEATERS
        M84
    {% endif %}
#    M84
#   TURN_OFF_HEATERS
#   SET_LED LED=Case_Neo RED=0.0 GREEN=0.0 BLUE=0.0
# 	UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=3600
# timeout: 1200

[save_variables]
filename: /home/pi/printer_data/config/saved_variables.cfg
#   Required - provide a filename that would be used to save the
#   variables to disk e.g. ~/variables.cfg

# Enable arcs support
[gcode_arcs]
resolution: 0.1

# Optional settings #
[force_move]
enable_force_move: true #False
#   Set to true to enable FORCE_MOVE and SET_KINEMATIC_POSITION
#   extended G-Code commands. The default is false.

[auto_speed]

# Printer Setup #
[printer]
kinematics: corexy
max_velocity: 500 #400  
max_accel: 24000 #15000
max_z_velocity: 10 #15
max_z_accel: 80 #100
square_corner_velocity: 5.0  

## MCU XYZ __SKR 1.4 Turbo___#
[mcu] 
#You will need to set this definition manually following the instructions in the line below
#	obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
serial: /dev/serial/by-id/usb-Klipper_lpc1769_1E80001347084AAFAEE16C5DC32000F5-if00
restart_method: command

## MCU E __can0__#
[mcu can0]
	#You will need to set this definition manually following the instructions in the line below
# run the following command to locate the uuid >   ~/klippy-env/bin/python ~/klipper/scripts/canbus_query.py can0
canbus_uuid: e82ffc665ce2 

# MCU RPi __Raspberry Pi 3B+___#
[mcu rpi]
serial: /tmp/klipper_host_mcu

#####################################################################
#   X/Y Stepper Settings
#####################################################################

######
## connected to SKR XYE - X Stepper
###############
[stepper_x]

step_pin: P2.2
dir_pin: !P2.6
enable_pin: multi_pin:my_enable_pin
rotation_distance: 40
microsteps: 64 #16
full_steps_per_rotation: 200
# connected to EBB36 - X Endstop
endstop_pin: can0:PB6
position_min: -40
position_endstop: 353
position_max: 353.5

homing_speed: 200 #85
homing_retract_speed:20
homing_retract_dist: 5
second_homing_speed: 10
homing_positive_dir: true

##--------------------------------------------------------------------
##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: P1.10
interpolate: false #true
run_current: 1.15 #1.25
#hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

# Pi & Stepper Fans
[multi_pin my_enable_pin]
pins: !P2.1, P2.3 #, tr:gpio20
#Starts the Electronics cooling fans SKR XYZ: Fan-0 when the stepper_x is activated

######
# connected to SKR XYZ - Y Stepper
###############
[stepper_y]

step_pin: P0.19
dir_pin: !P0.20
enable_pin: !P2.8
rotation_distance: 40
full_steps_per_rotation: 200
microsteps: 64 #16
# connected to SKR XYZ - Y Endstop
endstop_pin: P1.28
position_min: 0
position_endstop: 295
position_max: 295.5

homing_speed: 85
homing_retract_speed:20
homing_retract_dist: 5
second_homing_speed: 10
homing_positive_dir: true
##--------------------------------------------------------------------
##  Make sure to update below for your relevant driver
[tmc2209 stepper_y]
uart_pin: P1.9
interpolate: false #true
run_current: 1.15 #1.25
#hold_current: 0.7
sense_resistor: 0.110
stealthchop_threshold: 0

#####################################################################
#   Z Stepper Settings
#####################################################################

######
# Z0 Stepper - Left Front
# connected to SKR XYZ - E0 Stepper
###############
[stepper_z]

step_pin: P2.13
dir_pin: !P0.11
enable_pin: !P2.12
#T2 Leadscrew attached to a 1.8 deg Motor
rotation_distance: 2
full_steps_per_rotation: 200
microsteps: 16

# connected to Probe Endstop
endstop_pin: probe:z_virtual_endstop

position_max: 330 #this is set here on purpose, your actual travel will vary based on spring compression holding the bed, adjust at your own risk
position_min: -1.00 #this is set here on purpose, your actual travel will vary based on spring compression holding the bed, adjust at your own risk
homing_speed: 8 
second_homing_speed: 5.0
homing_retract_dist: 5.0
homing_positive_dir: false

##--------------------------------------------------------------------
[tmc2208 stepper_z]
uart_pin: P1.4
interpolate: true #false
run_current: 1.3 #1.2
#hold_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

######
#Z1 Stepper - Center Rear
# connected to SKR XYZ - Z Stepper
###############
[stepper_z1]

step_pin: P0.22
dir_pin: !P2.11
enable_pin: !P0.21
#T2 Leadscrew attached to a 1.8 deg Motor
rotation_distance: 2
full_steps_per_rotation: 200
microsteps: 16

##--------------------------------------------------------------------
[tmc2208 stepper_z1]
uart_pin: P1.8
interpolate: true #false
run_current: 1.3 #1.2
#hold_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0

######
#Z2 Stepper - Front Right
# connected to SKR XYZ - E1 Stepper
###############
[stepper_z2]

step_pin: P1.15
dir_pin: !P1.14
enable_pin: !P1.16
#T2 Leadscrew attached to a 1.8 deg Motor
rotation_distance: 2
full_steps_per_rotation: 200
microsteps: 16

##--------------------------------------------------------------------
[tmc2208 stepper_z2]
uart_pin: P1.1
interpolate: true #false
run_current: 1.3 #1.2
#hold_current: 0.6
sense_resistor: 0.110
stealthchop_threshold: 0


###################################################################
  # Dockable Probe
###################################################################

[dockable_probe]
# connected to SKR XYE - Probe Port
pin: can0:PB8
x_offset: 0.0
y_offset: 20.0 # offset for inductive probe y direction off nozzle
#z_offset: 2 # offset for inductive probe in z height, you will have to tune this yourself
dock_position: 341,294
approach_position: 341,270
detach_position: 310,294
dock_sense_pin: ^!P1.25
samples: 2
sample_retract_dist: 2
samples_result:  median #average
samples_tolerance: 0.020 #0.1
samples_tolerance_retries: 3
speed: 3
lift_speed: 5
z_hop: 8
###--------new stuff----------#
restore_toolhead: True
#   While True, the position of the toolhead is restored to the position prior
#   to the attach/detach movements.
#   The default value is True.
auto_attach_detach: True
#   Enable/Disable the automatic attaching/detaching of the probe during
#   actions that require the probe.
#   The default is True.
###---------------------------#
check_open_attach: True
dock_retries: 2
attach_speed: 30 #20
detach_speed: 80 #200
travel_speed: 350 #100


####################################################################
#Homing and Gantry Adjustment Routines
####################################################################

[homing_override]
gcode:
#axes: z
set_position_z: 0
gcode:
   #SET_LED LED=status_leds RED=1.00 GREEN=0.00 BLUE=0.00 TRANSMIT=1 #SET ALL LED'S RED
   STATUS_HOMING
   SET_LED LED=Case_Neo RED=1.0 GREEN=0.00 BLUE=0.00 TRANSMIT=1  
   G1 Z10 F400 #F600
   _HOME_X
   _HOME_Y
   ATTACH_PROBE
   G1 X147.5 Y147.5 F18000
   _HOME_Z
   STATUS_READY

#####################################################################
#Extruder 0 slot on EBB32 board
#####################################################################
[extruder]

step_pin: can0: PD0
dir_pin: !can0: PD1
enable_pin: !can0: PD2
# Tune per individual printer
rotation_distance: 21.64592 #22.67895 #for 5mm Shaft Driven Bondtech gearsets
gear_ratio: 50:8 #for sherpa mini 8t motor
microsteps: 16
full_steps_per_rotation: 200 #1.8 deg motor

# connected to EBB32 - HE0 Heater
heater_pin: can0: PB13
max_power: 1.0

# connected to EBB32 - TH0
#sensor_type: EPCOS 100K B57560G104F 
#sensor_type: Generic 3950
sensor_type: ATC Semitec 104NT-4-R025H42G
sensor_pin: can0: PA3

min_temp: 10
max_temp: 300
#max_power: 1.0
min_extrude_temp: 10
#control = pid
#pid_kp = 18.041
#pid_ki = 0.691
#pid_kd = 117.717

#0.4mm Nozzle
nozzle_diameter: 0.400
filament_diameter: 1.75
#pressure_advance: 0.0450 #FilX ASA
#pressure_advance: 0.0550 #Esun ABS+
pressure_advance: 0.0391 #Esun pla+
#pressure_advance: 0.0295  #MadHonet pla ST
pressure_advance_smooth_time: 0.040
max_extrude_only_distance: 200.0
max_extrude_cross_section: 5      #Remove if causing trouble!!! Only using for Adaptive_Purge
max_extrude_only_velocity: 20
max_extrude_only_accel: 1500

[tmc2209 extruder]
# conected to EBB32 - E0 Stepper
uart_pin: can0: PA15
interpolate: True #??????????????????????????????????????????????????

#Run current is listed in RMS
run_current: 0.32 #0.30 #min current, equivalent to 0.42A peak (Peak = RMS/0.707)
#run_current: 0.35 #max current, equivalent to 0.49A peak (Peak = RMS/0.707
sense_resistor: 0.110
#stealthchop_threshold: 0

#####################################################################
#Filament Motion Sensor
#####################################################################

# [filament_motion_sensor fila_sensor]
# detection_length: 10
# #   The minimum length of filament pulled through the sensor to trigger
# #   a state change on the switch_pin
# #   Default is 7 mm.
# extruder: extruder
# #   The name of the extruder section this sensor is associated with.
# #   This parameter must be provided.
# switch_pin: P1.26
# # changing the switch_pin name according to your motherboard
# pause_on_runout: True
# runout_gcode:
#  PAUSE

#####################################################################
#   Bed Heater
#####################################################################

######
# connected to SKR XYE - BED
###############
[heater_bed]
heater_pin: P2.5
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
sensor_type: NTC 100K MGB18-104F39050L32
# connected to SKR XYE - HB Temp
sensor_pin: P0.25
smooth_time: 1.0
##  Adjust Max Power so your heater doesn't warp your bed
max_power: 1.0
#Build Plate PID Settings
#control: pid
#pid_Kp: 42.475 
#pid_Ki: 1.395 
#pid_Kd: 323.339
min_temp: 10
max_temp: 130


#####################################################################
#   Heated Chamber
#####################################################################

###############
# conected to SKR XYZ
###############
[heater_generic chamber]
# #gcode_id: C
heater_pin: P2.7
sensor_type: NTC 100K MGB18-104F39050L32
sensor_pin: P0.24
#smooth_time: 3.0

max_power: 1.00
control: watermark #pid
max_delta: 5.0
# #pwm_cycle_time: 0.300
min_temp: 5
max_temp: 90

[verify_heater chamber]
check_gain_time: 180
# #   This controls heater verification during initial heating. Smaller
# #   values result in stricter checking and larger values allow for
# #   more time before an error is reported. Specifically, during
# #   initial heating, as long as the heater increases in temperature
# #   within this time frame (specified in seconds) then the internal
# #   "error counter" is reset. The default is 20 seconds for extruders
# #   and 60 seconds for heater_bed.
heating_gain: 1
# #   The minimum temperature (in Celsius) that the heater must increase
# #   by during the check_gain_time check. It is rare to customize this
# #   value. The default is 2.


#####################################################################
#   Fan Control
#####################################################################

## HOT END FAN
[heater_fan hotend_fan]
pin: can0: PA1 
max_power: 1.0
kick_start_time: 0.1
heater: extruder
heater_temp: 50.0

# Pi & Stepper Fans
[multi_pin my_fan]
pins: tr:gpio17, tr:gpio18

#Starts the Electronics cooling fans SKR XYZ: Fan-0 when the stepper_x is activated

## PART COOLING
[fan]
pin: can0: PA0
#pin=multi_pin:my_fan
max_power: 1
kick_start_time: 0.1
cycle_time: 0.010
min_power: 0.10



#Raspberry Pi Fan & Stepper Cooling
#See SKR XYZ - X Stepper Enable pin

# Raspberry Pi Temperature Sensor
[temperature_sensor 3_Rpi]
sensor_type: temperature_host
gcode_id: P

# EBB32 Temperature Sensor
[temperature_sensor 2_EBB32]
sensor_type: temperature_mcu
sensor_mcu: can0

[temperature_sensor 1_Heated_Bed]
sensor_type: NTC 100K MGB18-104F39050L32
sensor_pin: P0.23
min_temp: 10
max_temp: 120
#   See the "extruder" section for the definition of the above
#   parameters.
#gcode_id:
#   See the "heater_generic" section for the definition of this
#   parameter.

#####################################################################
#   Lights and Neopixels
#####################################################################

#Case lights
[output_pin Lights]
pin: !rpi:gpio27

#Neopixels
[neopixel Case_Neo]
pin: P1.24
chain_count: 13

#####################################################################
#   ADXL345 Resonance Tester
#####################################################################

## ADXL345
[adxl345]
cs_pin: can0: PB12
spi_software_sclk_pin: can0: PB10
spi_software_mosi_pin: can0: PB11
spi_software_miso_pin: can0: PB2
axes_map: x,z,z

[resonance_tester]
accel_chip: adxl345
probe_points:
    147.5,147.5,20
max_smoothing: 0.05

#####################################################################
#   G-Code Buttons & Macros
#####################################################################

# ADXLs macro
[gcode_macro Input_Shaper_Calibrate]
gcode:
    SHAPER_CALIBRATE

[gcode_button Light]
pin: ^!P1.22
press_gcode: LED_TOGGLE

[gcode_button E-Stop]
pin: ^!P1.23
press_gcode:{ action_emergency_stop() }

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode:
   {% if printer.idle_timeout.state == "Idle" %}
   SHUTDOWN
   {% endif %}

# #	Macro to Shutdown Machine
# [gcode_macro ALL_SHUTDOWN]
# gcode:
#   SET_LED LED=Case_Neo RED=0.0 GREEN=0.0 BLUE=0.0
#   {action_call_remote_method("shutdown_machine")}

#	Macro to Switch off Case_Neo
[gcode_macro NEOs_OFF]
gcode:
  SET_LED LED=Case_Neo RED=0.0 GREEN=0.0 BLUE=0.0
  SET_LOGO_LEDS_OFF
  SET_NOZZLE_LEDS_OFF

#SET_LED LED=status_leds RED=0.0 GREEN=0.0 BLUE=0.0 TRANSMIT=1

# LEDs macro
[gcode_macro LEDs_ON]
gcode:
    SET_PIN PIN=Lights VALUE=1

[gcode_macro LEDs_OFF]
gcode:
    SET_PIN PIN=Lights VALUE=0

[gcode_macro LED_TOGGLE]
gcode:
    {% if printer ["output_pin Lights"].value == 1 %}
        LEDs_OFF
    {% else %}
        LEDs_ON
    {% endif %}

# M601	macro to execute for pausing printer
[gcode_macro M601]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M601_state
    PAUSE
    # G91
    # G1 E-.8 F2700
    # G1 Z{Z}
    # G90
    # G1 X{X} Y{Y} F3000
    # G91
    # G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M601_state

# PAUSE	macro to execute when pausing printer
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = 0|float %}
    {% set y_park = 0|float %}
    #{% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    #{% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000	
	
# RESUME macro to execute when resuming printer
[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### end of definitions #####
    G91
    G1 E{E} F2100
    G4 P1000
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME


# CANCEL_PRINT macro to execute when canceling a print
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    print_end #execute the print end macro
	CLEAR_PAUSE
  	#SDCARD_RESET_FILE
  	BASE_CANCEL_PRINT

[gcode_macro Fila_Sensor_OFF] ; Add this to PRINT_END and PRINT_CANCEL
description: Disable smart filament sensor 
gcode:
    M117 DISABLING the Filament Sensor
    #G92 E0
    SET_FILAMENT_SENSOR SENSOR=fila_sensor ENABLE=0 ; Put your filament sensor's name after SENSOR=

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    # G91
    # G1 E-.8 F2700
    # G1 Z{Z}
    # G90
    # G1 X{X} Y{Y} F3000
    # G91
    # G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state    

#####################################################################
#   Bed Macros
#####################################################################
[z_tilt]
z_positions:
    -77.5, 1
    150, 324
    377.5, 1
#    150, 324
#	You will need to set these yourself, based on offset from the nozzle to the shoulder bolt pivots under the bed, you can then uncomment the lines above
#	To do this, put the gantry at 0,0 and measure the offset from the nozzle using a metric tape measure, place the coordinates into the lines above
#   A list of X,Y coordinates (one per line; subsequent lines
#   indented) describing the location of each bed "pivot point". The
#   "pivot point" is the point where the bed attaches to the given Z
#   stepper. It is described using nozzle coordinates (the XY position
#   of the nozzle if it could move directly above the point). The
#   first entry corresponds to stepper_z (Front Left), the second to stepper_z1(Front Right),
#   the third to stepper_z2(Rear Middle), etc.
points:
    10, 0
    150, 270
    290, 0
#    150, 275
#   A list of X,Y coordinates (one per line; subsequent lines
#   indented) that should be probed during a Z_TILT_ADJUST command.
#   Specify coordinates of the nozzle and be sure the probe is above
#   the bed at the given nozzle coordinates.

speed: 300
horizontal_move_z: 8.0
retries: 6
retry_tolerance: 0.02

# Mesh Bed Settings
[bed_mesh]
speed: 300
horizontal_move_z: 10
mesh_min: 10,20
mesh_max: 290,290
probe_count: 7,7
fade_start: 1.5
fade_end: 0
split_delta_z: .025
move_check_distance: 5.0
mesh_pps: 2,2
algorithm: bicubic
bicubic_tension: 0.1
#relative_reference_index: 12  # ^^^because were measuring the offset from the nozzle switch to the bed using the center of the bed, the equation to find the location = (probe point count)/2-1

#	Setting bed closer to nozzle for PID  	
[gcode_macro Extruder_PID]
gcode:
    G28
    G0 X150 Y150
    G1 Z5
	PID_CALIBRATE HEATER=extruder TARGET=260


#     M117

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 40.280
#*# pid_ki = 0.192
#*# pid_kd = 2107.129
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 47.979
#*# pid_ki = 12.795
#*# pid_kd = 44.980
#*#
#*# [input_shaper]
#*# shaper_type_x = mzv
#*# shaper_freq_x = 68.2
#*# shaper_type_y = zv
#*# shaper_freq_y = 59.6
#*#
#*# [dockable_probe]
#*# z_offset = 3.750
